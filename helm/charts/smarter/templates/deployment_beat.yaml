apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: {{ .Values.beatName }}
    meta.helm.sh/release-namespace: {{ .Values.namespace }}
    meta.helm.sh/application-version: {{ .Values.version }}
  labels:
    App: {{ .Values.beatName }}
  name: {{ .Values.beatName }}
  namespace: {{ .Values.namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.beatName }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.beatName }}
        deploymentTimestamp: "{{ now | unixEpoch }}"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-group
                    operator: In
                    values:
                      - smarter
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-group
                    operator: In
                    values:
                      - smarter
      tolerations:
        - key: "node-group"
          operator: "Equal"
          value: "smarter"
          effect: "NoSchedule"
      containers:
        - name: {{ .Values.workerName }}
          image: "{{ .Values.env.SMARTER_DOCKER_IMAGE }}"
          command: ["celery", "-A", "smarter.smarter_celery.app", "beat", "--loglevel=info"]
          imagePullPolicy: Always
          resources:
            requests:
              memory: "500Mi"
              cpu: "100m"
            limits:
              memory: "2Gi"
              cpu: "1"
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*beat' > /dev/null"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*beat' > /dev/null"
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          env:
            - name: ROOT_DOMAIN
              value: "{{ .Values.env.ROOT_DOMAIN }}"
            - name: AWS_REGION
              value: "{{ .Values.env.AWS_REGION }}"
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.env.AWS_ACCESS_KEY_ID }}"
            - name: AWS_SECRET_ACCESS_KEY
              value: "{{ .Values.env.AWS_SECRET_ACCESS_KEY}}"
            - name: ENVIRONMENT
              value: "{{ .Values.env.ENVIRONMENT }}"
            - name: DEBUG_MODE
              value: "{{ .Values.env.DEBUG_MODE }}"
            - name: DJANGO_SETTINGS_MODULE
              value: "{{ .Values.env.DJANGO_SETTINGS_MODULE }}"
            - name: DUMP_DEFAULTS
              value: "{{ .Values.env.DUMP_DEFAULTS }}"
            - name: FERNET_ENCRYPTION_KEY
              value: "{{ .Values.env.FERNET_ENCRYPTION_KEY }}"
            - name: MYSQL_HOST
              value: "{{ .Values.env.MYSQL_HOST }}"
            - name: MYSQL_PORT
              value: "{{ .Values.env.MYSQL_PORT }}"
            - name: MYSQL_DATABASE
              value: "{{ .Values.env.MYSQL_DATABASE }}"
            - name: MYSQL_USER
              value: "{{ .Values.env.MYSQL_USER }}"
            - name: MYSQL_PASSWORD
              value: "{{ .Values.env.MYSQL_PASSWORD }}"
            - name: OPENAI_API_KEY
              value: "{{ .Values.env.OPENAI_API_KEY }}"
            - name: PINECONE_API_KEY
              value: "{{ .Values.env.PINECONE_API_KEY }}"
            - name: PINECONE_ENVIRONMENT
              value: "{{ .Values.env.PINECONE_ENVIRONMENT }}"
            - name: GOOGLE_MAPS_API_KEY
              value: "{{ .Values.env.GOOGLE_MAPS_API_KEY }}"
            - name: GEMINI_API_KEY
              value: "{{ .Values.env.GEMINI_API_KEY }}"
            - name: LLAMA_API_KEY
              value: "{{ .Values.env.LLAMA_API_KEY }}"
            - name: MAILCHIMP_API_KEY
              value: "{{ .Values.env.MAILCHIMP_API_KEY }}"
            - name: SECRET_KEY
              value: "{{ .Values.env.SECRET_KEY }}"
            - name: SMARTER_MYSQL_TEST_DATABASE_PASSWORD
              value: "{{ .Values.env.SMARTER_MYSQL_TEST_DATABASE_PASSWORD }}"
            - name: SMTP_HOST
              value: "{{ .Values.env.SMTP_HOST }}"
            - name: SMTP_PORT
              value: "{{ .Values.env.SMTP_PORT }}"
            - name: SMTP_USE_SSL
              value: "{{ .Values.env.SMTP_USE_SSL }}"
            - name: SMTP_USE_TLS
              value: "{{ .Values.env.SMTP_USE_TLS }}"
            - name: SMTP_USERNAME
              value: "{{ .Values.env.SMTP_USERNAME }}"
            - name: SMTP_PASSWORD
              value: "{{ .Values.env.SMTP_PASSWORD }}"
            - name: CACHES_LOCATION
              value: "{{ .Values.env.CACHES_LOCATION }}"
            - name: CELERY_BROKER_URL
              value: "{{ .Values.env.CELERY_BROKER_URL }}"
            - name: CELERY_RESULT_BACKEND
              value: "{{ .Values.env.CELERY_RESULT_BACKEND }}"
            - name: SOCIAL_AUTH_GOOGLE_OAUTH2_KEY
              value: "{{ .Values.env.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY }}"
            - name: SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET
              value: "{{ .Values.env.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET }}"
            - name: SOCIAL_AUTH_GITHUB_KEY
              value: "{{ .Values.env.SOCIAL_AUTH_GITHUB_KEY }}"
            - name: SOCIAL_AUTH_GITHUB_SECRET
              value: "{{ .Values.env.SOCIAL_AUTH_GITHUB_SECRET }}"
            - name: SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY
              value: "{{ .Values.env.SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY }}"
            - name: SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET
              value: "{{ .Values.env.SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET }}"
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      shareProcessNamespace: false
