apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/name: "{{ .Values.appJobName }}"
  name: "{{ .Values.appJobName }}"
  namespace: "{{ .Values.env.NAMESPACE }}"
spec:
  backoffLimit: 4
  completionMode: NonIndexed
  completions: 1
  manualSelector: false
  parallelism: 1
  podReplacementPolicy: TerminatingOrFailed
  selector:
  suspend: false
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: "{{ .Values.appJobName }}"
        batch.kubernetes.io/job-name: "{{ .Values.appJobName }}"
        job-name: "{{ .Values.appJobName }}"
    spec:
      automountServiceAccountToken: true
      containers:
        - args:
            - |
              mysql -u "{{ .Values.env.MYSQL_ROOT_USERNAME }}" --password="{{ .Values.env.MYSQL_ROOT_PASSWORD }}" --host "{{ .Values.env.MYSQL_HOST }}" --port {{ .Values.env.MYSQL_PORT }} -e "CREATE DATABASE IF NOT EXISTS {{ .Values.env.MYSQL_DATABASE }};"
              mysql -u "{{ .Values.env.MYSQL_ROOT_USERNAME }}" --password="{{ .Values.env.MYSQL_ROOT_PASSWORD }}" --host "{{ .Values.env.MYSQL_HOST }}" --port {{ .Values.env.MYSQL_PORT }} -e "CREATE USER IF NOT EXISTS '{{ .Values.env.MYSQL_USER }}'@'%' IDENTIFIED BY '{{ .Values.env.MYSQL_PASSWORD }}';"
              mysql -u "{{ .Values.env.MYSQL_ROOT_USERNAME }}" --password="{{ .Values.env.MYSQL_ROOT_PASSWORD }}" --host "{{ .Values.env.MYSQL_HOST }}" --port {{ .Values.env.MYSQL_PORT }} -e "GRANT ALL PRIVILEGES ON {{ .Values.env.MYSQL_DATABASE }}.* TO '{{ .Values.env.MYSQL_USER }}'@'%'; FLUSH PRIVILEGES;"
              python manage.py migrate
              python manage.py create_admin_user --username "{{ .Values.env.SMARTER_ADMIN_USERNAME }}" --email "{{ .Values.env.SMARTER_ADMIN_USERNAME }}@{{ .Values.env.ROOT_DOMAIN }}" --password "{{ .Values.env.SMARTER_ADMIN_PASSWORD }}"
          command:
            - /bin/sh
            - -c
          env:
            - name: ROOT_DOMAIN
              value: "{{ .Values.env.ROOT_DOMAIN }}"
            - name: AWS_REGION
              value: "{{ .Values.env.AWS_REGION }}"
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.env.AWS_ACCESS_KEY_ID }}"
            - name: AWS_SECRET_ACCESS_KEY
              value: "{{ .Values.env.AWS_SECRET_ACCESS_KEY}}"
            - name: ENVIRONMENT
              value: "{{ .Values.env.ENVIRONMENT }}"
            - name: DEBUG_MODE
              value: "{{ .Values.env.DEBUG_MODE }}"
            - name: DUMP_DEFAULTS
              value: "{{ .Values.env.DUMP_DEFAULTS }}"
            - name: MYSQL_HOST
              value: "{{ .Values.env.MYSQL_HOST }}"
            - name: MYSQL_PORT
              value: "{{ .Values.env.MYSQL_PORT }}"
            - name: MYSQL_DATABASE
              value: "{{ .Values.env.MYSQL_DATABASE }}"
            - name: MYSQL_USER
              value: "{{ .Values.env.MYSQL_USER }}"
            - name: MYSQL_PASSWORD
              value: "{{ .Values.env.MYSQL_PASSWORD }}"
            - name: OPENAI_API_KEY
              value: "{{ .Values.env.OPENAI_API_KEY }}"
            - name: PINECONE_API_KEY
              value: "{{ .Values.env.PINECONE_API_KEY }}"
            - name: PINECONE_ENVIRONMENT
              value: "{{ .Values.env.PINECONE_ENVIRONMENT }}"
            - name: GOOGLE_MAPS_API_KEY
              value: "{{ .Values.env.GOOGLE_MAPS_API_KEY }}"
            - name: SECRET_KEY
              value: "{{ .Values.env.SECRET_KEY }}"
          image: "{{ .Values.env.SMARTER_DOCKER_IMAGE }}"
          imagePullPolicy: Always
          name: "{{ .Values.appJobName }}"
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      restartPolicy: Never
      schedulerName: default-scheduler
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 30
