---
#------------------------------------------------------------------------------
# - build the Docker image
# - run all unit tests
# - push to AWS ECR
#------------------------------------------------------------------------------
name: Test Python
branding:
  icon: "git-pull-request"
  color: "orange"
inputs:
  environment:
    description: "The environment to deploy"
    required: true
  aws-ecr-push:
    description: "Push the Docker image to Amazon ECR"
    required: true
    default: "false"
  aws-access-key-id:
    description: "The AWS access key ID"
    required: true
    type: string
  aws-secret-access-key:
    description: "The AWS secret access key"
    required: true
    type: string
  aws-region:
    description: "The AWS region to deploy to"
    required: true
    type: string
  root-domain:
    description: "The root domain of the project"
    required: true
    type: string
  python-version:
    description: "The version of Python to use, such as 3.11.0"
    required: true
    type: string
  openai-api-key:
    description: "The OpenAI API key"
    required: true
    type: string
  pinecone-api-key:
    description: "The Pinecone API key"
    required: true
    type: string
  pinecone-environment:
    description: "The Pinecone environment"
    required: true
    type: string
  google-maps-api-key:
    description: "Google Maps API key"
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Checkout code
      id: checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # authenticate AWS CLI
    - name: Configure AWS credentials
      id: aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    # put an entry in the run log to show the aws cli version and the IAM user
    - name: Check awscli version and identity
      id: awscli-version
      shell: bash
      run: |-
        echo "aws cli version:"
        echo "----------------"
        aws --version
        echo
        echo "aws IAM user:"
        echo "-------------"
        aws sts get-caller-identity

    # NOTE: we're going to borrow the SMTP credentials from the Kubernetes secret
    # for this environment, since unit tests will send a test email and we don't
    # have a default set of credentials for the local environment.
    - name: Add to .env
      shell: bash
      run: |
        touch .env

    #--------------------------------------------------------------------------
    # Build and Push the Docker image to Amazon ECR
    #--------------------------------------------------------------------------
    # connect to Amazon ECR so that we can programmatically
    # figure out the Docker image to add to the Helm values for the
    # Kubernetes deployment manifest.
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # set the Docker image to the environment variable SMARTER_DOCKER_IMAGE
    # example:  012345678903.dkr.ecr.us-east-2.amazonaws.com/smarter-platform-alpha:latest
    - name: Set Docker image
      id: set-docker-image
      shell: bash
      run: |-
        echo "SMARTER_DOCKER_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO }}:latest" >> $GITHUB_ENV
      env:
        AWS_ECR_REPO: ${{ env.NAMESPACE }}

    - name: Create the repository
      id: create-repo
      shell: bash
      run: |
        aws ecr describe-repositories --repository-names ${{ env.AWS_ECR_REPO }} || aws ecr create-repository --repository-name ${{ env.AWS_ECR_REPO }}

    - name: Get the date
      shell: bash
      run: echo "DATESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

    - name: Build and push
      id: docker-build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO }}:latest, ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO }}:${{ github.run_id }}, ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO }}:${{ env.DATESTAMP }}
        build-args: ENVIRONMENT=${{ inputs.environment }}
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        AWS_ECR_REPO: ${{ env.NAMESPACE }}
