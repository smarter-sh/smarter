---
#------------------------------------------------------------------------------
# - build the Docker image
# - run all unit tests
# - push to AWS ECR
#------------------------------------------------------------------------------
name: Test Python
branding:
  icon: "git-pull-request"
  color: "orange"
inputs:
  environment:
    description: "The environment to deploy"
    required: true
  aws-ecr-push:
    description: "Push the Docker image to Amazon ECR"
    required: true
    default: "false"
  aws-access-key-id:
    description: "The AWS access key ID"
    required: true
    type: string
  aws-secret-access-key:
    description: "The AWS secret access key"
    required: true
    type: string
  aws-region:
    description: "The AWS region to deploy to"
    required: true
    type: string
  root-domain:
    description: "The root domain of the project"
    required: true
    type: string
  python-version:
    description: "The version of Python to use, such as 3.11.0"
    required: true
    type: string
  openai-api-key:
    description: "The OpenAI API key"
    required: true
    type: string
  pinecone-api-key:
    description: "The Pinecone API key"
    required: true
    type: string
  pinecone-environment:
    description: "The Pinecone environment"
    required: true
    type: string
  google-maps-api-key:
    description: "Google Maps API key"
    required: true
    type: string

runs:
  using: "composite"
  steps:
    #--------------------------------------------------------------------------
    # Initializations
    #--------------------------------------------------------------------------

    # Set the Kubernetes namespace based on the environment
    - name: Initialize environment variables
      shell: bash
      run: |-
        echo "NAMESPACE=${{ env.NAMESPACE_BASE }}-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        NAMESPACE_BASE: smarter-platform

    - name: Checkout code
      id: checkout
      uses: actions/checkout@v4

    # authenticate AWS CLI
    - name: Configure AWS credentials
      id: aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    # put an entry in the run log to show the aws cli version and the IAM user
    - name: Check awscli version and identity
      id: awscli-version
      shell: bash
      run: |-
        echo "aws cli version:"
        echo "----------------"
        aws --version
        echo
        echo "aws IAM user:"
        echo "-------------"
        aws sts get-caller-identity

    # install kubectl, which Helm will use to deploy the application
    - name: Install kubectl
      id: kubectl-install
      shell: bash
      run: |-
        sudo snap install kubectl --classic

    # setup kubeconfig using the aws eks helper command, 'update-kubeconfig'
    - name: Configure kubectl
      id: kubectl-configure
      shell: bash
      run: |-
        aws eks --region ${{ inputs.aws-region }} update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --alias ${{ env.EKS_CLUSTER_NAME }}
        echo "kubectl version and diagnostic info:"
        echo "------------------------------------"
        kubectl version
      env:
        EKS_CLUSTER_NAME: apps-hosting-service

    # install jq, which k8s-get-secret will use to parse the Kubernetes secret
    # and set the environment variables
    - name: Install jq
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    # connect to Amazon ECR so that we can programmatically
    # figure out the Docker image to add to the Helm values for the
    # Kubernetes deployment manifest.
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # set the Docker image to the environment variable SMARTER_DOCKER_IMAGE
    # example:  012345678903.dkr.ecr.us-east-2.amazonaws.com/smarter-platform-alpha:latest
    - name: Set Docker image
      id: set-docker-image
      shell: bash
      run: |-
        echo "SMARTER_DOCKER_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO }}:latest" >> $GITHUB_ENV
      env:
        AWS_ECR_REPO: ${{ env.NAMESPACE }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    #--------------------------------------------------------------------------
    # Build and Configure the Docker image
    #--------------------------------------------------------------------------

    # extract the Django SMTP email from the Kubernetes secret.
    # these will be set as environment variables for the Helm deployment
    #
    # example:
    # SMTP_HOST: email-smtp.us-east-2.amazonaws.com
    # SMTP_PORT: "587"
    # SMTP_USE_SSL: "false"
    # SMTP_USE_TLS: "true"
    # SMTP_USERNAME: an IAM key-pair id
    # SMTP_PASSWORD: an IAM key-pair secret
    - name: Configure SMTP email credentials from Kubernetes secret
      id: get-aws-ses-secret
      uses: ./.github/actions/k8s-get-secret
      with:
        eks-namespace: ${{ env.NAMESPACE }}
        eks-secret-name: aws-ses-config

    # extract the Django application secret from the Kubernetes secret.
    # these will be set as environment variables for the Helm deployment
    #
    # example:
    # SECRET_KEY: top-secret-key
    - name: Configure django secret from Kubernetes secret
      id: get-django-secret
      uses: ./.github/actions/k8s-get-secret
      with:
        eks-namespace: ${{ env.NAMESPACE }}
        eks-secret-name: smarter-django-secret-key

    # see: https://github.com/helm/helm
    #      we're installing directly from the github repo amd64 binary
    - name: Install Helm
      id: helm-install
      shell: bash
      run: |-
        curl -LO https://get.helm.sh/helm-v3.14.2-linux-amd64.tar.gz
        tar -zxvf helm-v3.14.2-linux-amd64.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/helm

    - name: Create .env
      shell: bash
      run: |
        touch .env
        echo "GOOGLE_MAPS_API_KEY=${{ inputs.google-maps-api-key }}" >> .env
        echo "OPENAI_API_ORGANIZATION=${{ env.OPENAI_API_ORGANIZATION }}" >> .env
        echo "OPENAI_API_KEY=${{ inputs.openai-api-key }}" >> .env
        echo "PINECONE_API_KEY=${{ inputs.pinecone-api-key }}" >> .env
        echo "PINECONE_ENVIRONMENT=${{ inputs.pinecone-environment }}" >> .env
        echo "DEBUG_MODE=${{ env.DEBUG_MODE }}" >> .env
        echo "ROOT_DOMAIN=${{ inputs.root-domain }}" >> .env
        echo "DJANGO_SETTINGS_MODULE=${{ env.DJANGO_SETTINGS_MODULE }}" >> .env
        echo "AWS_REGION=${{ inputs.aws-region }}" >> .env
        echo "AWS_ACCESS_KEY_ID=${{ inputs.aws-access-key-id }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }}" >> .env
        echo "NAMESPACE=${{ env.NAMESPACE }}" >> .env
        echo "DUMP_DEFAULTS=True" >> .env
        echo "SMARTER_DOCKER_IMAGE=${{ env.SMARTER_DOCKER_IMAGE }}" >> .env
        echo "SECRET_KEY=${{ env.SECRET_KEY }}" >> .env
        echo "SMARTER_LOGIN_URL=${{ env.SMARTER_LOGIN_URL }}" >> .env
        echo "SMARTER_ADMIN_PASSWORD=${{ env.SMARTER_ADMIN_PASSWORD }}" >> .env
        echo "SMARTER_ADMIN_USERNAME=${{ env.SMARTER_ADMIN_USERNAME }}" >> .env
        echo "SMARTER_ADMIN_EMAIL=${{ env.SMARTER_ADMIN_EMAIL }}" >> .env
        echo "SMTP_HOST=${{ env.SMTP_HOST }}" >> .env
        echo "SMTP_PORT=${{ env.SMTP_PORT }}" >> .env
        echo "SMTP_USE_SSL=${{ env.SMTP_USE_SSL }}" >> .env
        echo "SMTP_USE_TLS=${{ env.SMTP_USE_TLS }}" >> .env
        echo "SMTP_USERNAME=${{ env.SMTP_USERNAME }}" >> .env
        echo "SMTP_PASSWORD=${{ env.SMTP_PASSWORD }}" >> .env
      env:
        DEBUG_MODE: False
        DJANGO_SETTINGS_MODULE: smarter.settings.${{ inputs.environment }}

    # Dump all of our environment variables to the run log
    - name: Dump environment variables
      id: dump-env
      shell: bash
      run: |-
        pwd
        echo "env"
        echo "-------------------------------"
        cat .env
        echo
        echo
        echo "GITHUB_ENV"
        echo "-------------------------------"
        cat $GITHUB_ENV
        echo
        echo
        echo "env"
        echo "-------------------------------"
        env

    #--------------------------------------------------------------------------
    # Test
    #--------------------------------------------------------------------------
    - name: Build local and run Python unit tests
      shell: bash
      env:
        ENVIRONMENT: local
        GITHUB_ACTIONS: "true"
        DEBUG_MODE: "true"
      run: |
        make docker-init
        make docker-test

    - name: Rebuild for environment
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        GITHUB_ACTIONS: "true"
        DEBUG_MODE: "false"
      run: |
        make docker-build

    #--------------------------------------------------------------------------
    # Push the Docker image to Amazon ECR
    #--------------------------------------------------------------------------
    - name: Create the repository
      id: create-repo
      shell: bash
      run: |
        aws ecr describe-repositories --repository-names ${{ env.AWS_ECR_REPO }} || aws ecr create-repository --repository-name ${{ env.AWS_ECR_REPO }}
      if: ${{ inputs.aws-ecr-push == 'true' }}

    - name: Get the date
      shell: bash
      run: echo "DATESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      if: ${{ inputs.aws-ecr-push == 'true' }}

    - name: Build and push
      id: docker-build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO }}:latest, ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO }}:${{ github.run_id }}, ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO }}:${{ env.DATESTAMP }}
        build-args: ENVIRONMENT=${{ inputs.environment }}
      if: ${{ inputs.aws-ecr-push == 'true' }}
