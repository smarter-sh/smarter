# Generated by Django 5.1.7 on 2025-06-27 16:31
# pylint: disable=missing-module-docstring,missing-function-docstring,missing-class-docstring

import django.contrib.auth.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def migrate_users_forward(apps, schema_editor):
    """Migrate existing auth.User records to account.User"""
    # Use raw SQL to avoid inheritance issues
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            """
            INSERT INTO account_user (user_ptr_id)
            SELECT id FROM auth_user
            WHERE id NOT IN (SELECT user_ptr_id FROM account_user)
        """
        )


def migrate_users_backward(apps, schema_editor):
    """Remove account.User records"""
    AccountUser = apps.get_model("account", "User")
    AccountUser.objects.all().delete()


def update_foreign_keys_forward(apps, schema_editor):
    """Update foreign key references to point to account.User"""
    Charge = apps.get_model("account", "Charge")
    DailyBillingRecord = apps.get_model("account", "DailyBillingRecord")
    UserProfile = apps.get_model("account", "UserProfile")
    AccountUser = apps.get_model("account", "User")

    # Update Charge records
    for charge in Charge.objects.all():
        try:
            account_user = AccountUser.objects.get(user_ptr_id=charge.user_id)
            charge.user_id = account_user.user_ptr_id
            charge.save()
        except AccountUser.DoesNotExist:
            # Handle orphaned records - either delete or create missing user
            charge.delete()  # or create the missing user

    # Update DailyBillingRecord records
    for record in DailyBillingRecord.objects.all():
        try:
            account_user = AccountUser.objects.get(user_ptr_id=record.user_id)
            record.user_id = account_user.user_ptr_id
            record.save()
        except AccountUser.DoesNotExist:
            record.delete()

    # Update UserProfile records
    for profile in UserProfile.objects.all():
        try:
            account_user = AccountUser.objects.get(user_ptr_id=profile.user_id)
            profile.user_id = account_user.user_ptr_id
            profile.save()
        except AccountUser.DoesNotExist:
            profile.delete()


def update_foreign_keys_backward(apps, schema_editor):
    """Revert foreign key references back to auth.User"""
    # This would be the reverse operation if needed
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("account", "0010_account_is_active"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            bases=("auth.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RunPython(migrate_users_forward, migrate_users_backward, hints={"model_name": "user"}),
        migrations.RunPython(update_foreign_keys_forward, update_foreign_keys_backward, hints={"model_name": "charge"}),
        migrations.AlterField(
            model_name="charge",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="charge",
                to="account.user",
            ),
        ),
        migrations.AlterField(
            model_name="dailybillingrecord",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="daily_billing_records",
                to="account.user",
            ),
        ),
        migrations.AlterField(
            model_name="userprofile",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user_profile",
                to="account.user",
            ),
        ),
    ]
