# Generated by Django 5.1.7 on 2025-05-07 14:28
# pylint: disable=missing-module-docstring,missing-function-docstring,missing-class-docstring

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import smarter.apps.plugin.models


class Migration(migrations.Migration):

    dependencies = [
        ("account", "0008_alter_secret_options_alter_secret_last_accessed_and_more"),
        ("plugin", "0006_alter_pluginprompt_model"),
    ]

    operations = [
        migrations.RunSQL(
            sql="DROP TABLE IF EXISTS plugin_sqlconnection;",
            reverse_sql="CREATE TABLE plugin_sqlconnection (id SERIAL PRIMARY KEY);",
        ),
        migrations.CreateModel(
            name="SqlConnection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the connection, without spaces. Example: 'HRDatabase', 'SalesDatabase', 'InventoryDatabase'.",
                        max_length=255,
                        validators=[smarter.apps.plugin.models.validate_no_spaces],
                    ),
                ),
                (
                    "db_engine",
                    models.CharField(
                        choices=[
                            ("django.db.backends.mysql", "MySQL"),
                            ("django.db.backends.postgresql", "PostgreSQL"),
                            ("django.db.backends.sqlite3", "SQLite3"),
                            ("django.db.backends.oracle", "Oracle"),
                            ("django.db.backends.mssql", "MS SQL Server"),
                            ("django.db.backends.sybase", "Sybase"),
                        ],
                        help_text="The type of database management system. Example: 'MySQL', 'PostgreSQL', 'MS SQL Server', 'Oracle'.",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="A brief description of the connection. Be verbose, but not too verbose."
                    ),
                ),
                ("hostname", models.CharField(max_length=255)),
                ("port", models.IntegerField()),
                ("database", models.CharField(max_length=255)),
                ("username", models.CharField(max_length=255)),
                ("password", models.CharField(blank=True, max_length=255, null=True)),
                ("proxy_host", models.CharField(blank=True, max_length=255, null=True)),
                ("proxy_port", models.IntegerField(blank=True, null=True)),
                (
                    "proxy_username",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "proxy_password",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_data_sql_connections",
                        to="account.account",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="sqlconnection",
            name="authentication_method",
            field=models.CharField(
                choices=[
                    ("none", "None"),
                    ("tcpip", "Standard TCP/IP"),
                    ("tcpip_ssh", "Standard TCP/IP over SSH"),
                    ("ldap_user_pwd", "LDAP User/Password"),
                ],
                default="none",
                help_text="The authentication method to use for the connection. Example: 'Standard TCP/IP', 'Standard TCP/IP over SSH', 'LDAP User/Password'.",
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name="sqlconnection",
            name="max_overflow",
            field=models.IntegerField(
                default=10,
                help_text="The maximum number of connections to allow beyond the pool size.",
            ),
        ),
        migrations.AddField(
            model_name="sqlconnection",
            name="pool_size",
            field=models.IntegerField(default=5, help_text="The size of the connection pool."),
        ),
        migrations.AddField(
            model_name="sqlconnection",
            name="proxy_protocol",
            field=models.CharField(
                choices=[("http", "HTTP"), ("https", "HTTPS"), ("socks", "SOCKS")],
                default="http",
                help_text="The protocol to use for the proxy connection.",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="sqlconnection",
            name="ssl_ca",
            field=models.TextField(
                blank=True,
                help_text="The Certificate Authority (CA) certificate for verifying the server.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="sqlconnection",
            name="ssl_cert",
            field=models.TextField(
                blank=True,
                help_text="The SSL certificate for the connection, if required.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="sqlconnection",
            name="ssl_key",
            field=models.TextField(
                blank=True,
                help_text="The SSL key for the connection, if required.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="sqlconnection",
            name="timeout",
            field=models.IntegerField(
                default=30,
                help_text="The timeout for the database connection in seconds. Default is 30 seconds.",
                validators=[django.core.validators.MinValueValidator(1)],
            ),
        ),
        migrations.AddField(
            model_name="sqlconnection",
            name="use_ssl",
            field=models.BooleanField(default=False, help_text="Whether to use SSL/TLS for the connection."),
        ),
        migrations.AlterField(
            model_name="plugindatabase",
            name="plugin",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugin_data_base_plugin",
                to="plugin.pluginmeta",
            ),
        ),
        migrations.AlterField(
            model_name="pluginmeta",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugin_meta_account",
                to="account.account",
            ),
        ),
        migrations.AlterField(
            model_name="pluginmeta",
            name="author",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugin_meta_author",
                to="account.userprofile",
            ),
        ),
        migrations.AlterField(
            model_name="pluginmeta",
            name="plugin_class",
            field=models.CharField(
                choices=[
                    ("static", "PluginStatic"),
                    ("sql", "PluginDataSql"),
                    ("api", "SqlConnection"),
                ],
                default="PluginMeta",
                help_text="The class name of the plugin",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="pluginprompt",
            name="plugin",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugin_prompt_plugin",
                to="plugin.pluginmeta",
            ),
        ),
        migrations.AlterField(
            model_name="pluginselector",
            name="plugin",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugin_selector_plugin",
                to="plugin.pluginmeta",
            ),
        ),
        migrations.AlterField(
            model_name="pluginselectorhistory",
            name="plugin_selector",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugin_selector_history_plugin_selector",
                to="plugin.pluginselector",
            ),
        ),
        migrations.AlterField(
            model_name="sqlconnection",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sql_connections_account",
                to="account.account",
            ),
        ),
        migrations.AlterField(
            model_name="sqlconnection",
            name="password",
            field=models.ForeignKey(
                blank=True,
                help_text="The API key for authentication, if required.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sql_connections_password",
                to="account.secret",
            ),
        ),
        migrations.AlterField(
            model_name="sqlconnection",
            name="proxy_password",
            field=models.ForeignKey(
                blank=True,
                help_text="The API key for authentication, if required.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sql_connections_proxy_password",
                to="account.secret",
            ),
        ),
        migrations.RunSQL(
            sql="DROP TABLE IF EXISTS plugin_apiconnection;",
            reverse_sql="CREATE TABLE plugin_apiconnection (id SERIAL PRIMARY KEY);",
        ),
        migrations.CreateModel(
            name="ApiConnection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the API connection, camelCase, without spaces. Example: 'weatherApi', 'stockApi'.",
                        max_length=255,
                        validators=[smarter.apps.plugin.models.validate_no_spaces],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="A brief description of the API connection. Be verbose, but not too verbose."
                    ),
                ),
                (
                    "base_url",
                    models.URLField(help_text="The root domain of the API. Example: 'https://api.example.com'."),
                ),
                (
                    "auth_method",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("basic", "Basic Auth"),
                            ("token", "Token Auth"),
                            ("oauth", "OAuth"),
                        ],
                        default="none",
                        help_text="The authentication method to use. Example: 'Basic Auth', 'Token Auth'.",
                        max_length=50,
                    ),
                ),
                (
                    "timeout",
                    models.IntegerField(
                        default=30,
                        help_text="The timeout for the API request in seconds. Default is 30 seconds.",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "proxy_protocol",
                    models.CharField(
                        choices=[
                            ("http", "HTTP"),
                            ("https", "HTTPS"),
                            ("socks", "SOCKS"),
                        ],
                        default="http",
                        help_text="The protocol to use for the proxy connection.",
                        max_length=10,
                    ),
                ),
                ("proxy_host", models.CharField(blank=True, max_length=255, null=True)),
                ("proxy_port", models.IntegerField(blank=True, null=True)),
                (
                    "proxy_username",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_connections_account",
                        to="account.account",
                    ),
                ),
                (
                    "api_key",
                    models.ForeignKey(
                        blank=True,
                        help_text="The API key for authentication, if required.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_connections_api_key",
                        to="account.secret",
                    ),
                ),
                (
                    "proxy_password",
                    models.ForeignKey(
                        blank=True,
                        help_text="The proxy password for authentication, if required.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_connections_proxy_password",
                        to="account.secret",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunSQL(
            sql="DROP TABLE IF EXISTS plugin_plugindataapi;",
            reverse_sql="CREATE TABLE plugin_plugindataapi (id SERIAL PRIMARY KEY);",
        ),
        migrations.CreateModel(
            name="PluginDataApi",
            fields=[
                (
                    "plugindatabase_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="plugin.plugindatabase",
                    ),
                ),
                (
                    "endpoint",
                    models.CharField(
                        help_text="The endpoint path for the API. Example: '/v1/weather'.",
                        max_length=255,
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON dict containing parameter names and data types. Example: {'city': {'type': 'string', 'description': 'City name'}}",
                        null=True,
                    ),
                ),
                (
                    "headers",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON dict containing headers to be sent with the API request. Example: {'Authorization': 'Bearer <token>'}",
                        null=True,
                    ),
                ),
                (
                    "body",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON dict containing the body of the API request, if applicable.",
                        null=True,
                    ),
                ),
                (
                    "test_values",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON dict containing test values for each parameter. Example: {'city': 'San Francisco'}",
                        null=True,
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        help_text="The API connection associated with this plugin.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_data_api_connection",
                        to="plugin.apiconnection",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("plugin.plugindatabase",),
        ),
        migrations.RunSQL(
            sql="DROP TABLE IF EXISTS plugin_plugindatasql;",
            reverse_sql="CREATE TABLE plugin_plugindatasql (id SERIAL PRIMARY KEY);",
        ),
        migrations.CreateModel(
            name="PluginDataSql",
            fields=[
                (
                    "plugindatabase_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="plugin.plugindatabase",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the SQL connection, camelCase, without spaces. Example: 'HRDatabase', 'SalesDatabase', 'InventoryDatabase'.",
                        max_length=255,
                        validators=[smarter.apps.plugin.models.validate_no_spaces],
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON dict containing parameter names and data types. Example: {'unit': {'type': 'string', 'enum': ['Celsius', 'Fahrenheit'], 'description': 'The temperature unit to use. Infer this from the user's location.'}}",
                        null=True,
                    ),
                ),
                (
                    "sql_query",
                    models.TextField(
                        help_text="The SQL query that this plugin will execute when invoked by the user prompt."
                    ),
                ),
                (
                    "test_values",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON dict containing test values for each parameter. Example: {'product_id': 1234}",
                        null=True,
                    ),
                ),
                (
                    "limit",
                    models.IntegerField(
                        blank=True,
                        default=100,
                        help_text="The maximum number of rows to return from the query.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_data_sql_connection",
                        to="plugin.sqlconnection",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("plugin.plugindatabase",),
        ),
        migrations.RunSQL(
            sql="DROP TABLE IF EXISTS plugin_plugindatasqlconnection;",
            reverse_sql="CREATE TABLE plugin_plugindatasqlconnection (id SERIAL PRIMARY KEY);",
        ),
    ]
