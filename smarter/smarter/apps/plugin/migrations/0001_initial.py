# pylint: disable=missing-module-docstring,missing-function-docstring,missing-class-docstring
# Generated by Django 5.0.6 on 2024-05-15 23:37

import django.core.validators
import django.db.models.deletion
import taggit.managers
from django.db import migrations, models

import smarter.apps.plugin.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("account", "0001_initial"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="PluginDataBase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "description",
                    models.TextField(
                        help_text="A brief description of what this plugin returns. Be verbose, but not too verbose."
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PluginDataStatic",
            fields=[
                (
                    "plugindatabase_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="plugin.plugindatabase",
                    ),
                ),
                (
                    "static_data",
                    models.JSONField(
                        default=dict,
                        help_text="The JSON data that this plugin returns to OpenAI API when invoked by the user prompt.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Plugin Static Data",
                "verbose_name_plural": "Plugin Static Data",
            },
            bases=("plugin.plugindatabase",),
        ),
        migrations.CreateModel(
            name="PluginDataSqlConnection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the connection, without spaces. Example: 'HRDatabase', 'SalesDatabase', 'InventoryDatabase'.",
                        max_length=255,
                        validators=[smarter.apps.plugin.models.validate_no_spaces],
                    ),
                ),
                (
                    "db_engine",
                    models.CharField(
                        choices=[
                            ("django.db.backends.mysql", "MySQL"),
                            ("django.db.backends.postgresql", "PostgreSQL"),
                            ("django.db.backends.sqlite3", "SQLite3"),
                            ("django.db.backends.oracle", "Oracle"),
                            ("django.db.backends.mssql", "MS SQL Server"),
                            ("django.db.backends.sybase", "Sybase"),
                        ],
                        help_text="The type of database management system. Example: 'MySQL', 'PostgreSQL', 'MS SQL Server', 'Oracle'.",
                        max_length=255,
                    ),
                ),
                ("hostname", models.CharField(max_length=255)),
                ("port", models.IntegerField()),
                ("database", models.CharField(max_length=255)),
                ("username", models.CharField(max_length=255)),
                ("password", models.CharField(blank=True, max_length=255, null=True)),
                ("proxy_host", models.CharField(blank=True, max_length=255, null=True)),
                ("proxy_port", models.IntegerField(blank=True, null=True)),
                (
                    "proxy_username",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "proxy_password",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_data_sql_connections",
                        to="account.account",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PluginMeta",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the plugin. Example: 'HR Policy Update' or 'Public Relation Talking Points'.",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="A brief description of the plugin. Be verbose, but not too verbose."),
                ),
                (
                    "plugin_class",
                    models.CharField(
                        choices=[
                            ("static", "PluginStatic"),
                            ("sql", "PluginDataSql"),
                            ("api", "PluginDataSqlConnection"),
                        ],
                        default="PluginMeta",
                        help_text="The class name of the plugin",
                        max_length=255,
                    ),
                ),
                ("version", models.CharField(default="1.0.0", max_length=255)),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_meta",
                        to="account.account",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_meta",
                        to="account.userprofile",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Plugin",
                "verbose_name_plural": "Plugins",
                "unique_together": {("account", "name")},
            },
        ),
        migrations.AddField(
            model_name="plugindatabase",
            name="plugin",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugin_data_base",
                to="plugin.pluginmeta",
            ),
        ),
        migrations.CreateModel(
            name="PluginPrompt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "system_role",
                    models.TextField(
                        blank=True,
                        default="You are a helful assistant.",
                        help_text="The role of the system in the conversation.",
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        default="gpt-3.5-turbo",
                        help_text="The model to use for the completion.",
                        max_length=255,
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        default=0.5,
                        help_text="The higher the temperature, the more creative the result.",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "max_tokens",
                    models.IntegerField(
                        default=256,
                        help_text="The maximum number of tokens for both input and output.",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4096),
                        ],
                    ),
                ),
                (
                    "plugin",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_prompt",
                        to="plugin.pluginmeta",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PluginSelector",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "directive",
                    models.CharField(
                        default="search_terms",
                        help_text="The selection strategy to use for this plugin.",
                        max_length=255,
                    ),
                ),
                (
                    "search_terms",
                    models.JSONField(
                        default=list,
                        help_text="search terms in JSON format that, if detected in the user prompt, will incentivize Smarter to load this plugin.",
                    ),
                ),
                (
                    "plugin",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_selector",
                        to="plugin.pluginmeta",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PluginSelectorHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "search_term",
                    models.CharField(blank=True, default="", max_length=255, null=True),
                ),
                (
                    "messages",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="The user prompt messages.",
                        null=True,
                    ),
                ),
                (
                    "plugin_selector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_selector_history",
                        to="plugin.pluginselector",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Plugin Selector History",
            },
        ),
        migrations.CreateModel(
            name="PluginDataSql",
            fields=[
                (
                    "plugindatabase_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="plugin.plugindatabase",
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON dict containing parameter names and data types. Example: {'unit': {'type': 'string', 'enum': ['Celsius', 'Fahrenheit'], 'description': 'The temperature unit to use. Infer this from the user's location.'}}",
                        null=True,
                    ),
                ),
                (
                    "sql_query",
                    models.TextField(
                        help_text="The SQL query that this plugin will execute when invoked by the user prompt."
                    ),
                ),
                (
                    "test_values",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON dict containing test values for each parameter. Example: {'product_id': 1234}",
                        null=True,
                    ),
                ),
                (
                    "limit",
                    models.IntegerField(
                        blank=True,
                        default=100,
                        help_text="The maximum number of rows to return from the query.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugin_data_sql",
                        to="plugin.plugindatasqlconnection",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("plugin.plugindatabase",),
        ),
    ]
