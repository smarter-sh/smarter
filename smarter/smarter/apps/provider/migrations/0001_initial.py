# Generated by Django 5.1.7 on 2025-06-24 00:14
# pylint: disable=missing-module-docstring,missing-function-docstring,missing-class-docstring

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import smarter.common.classes


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("account", "0010_account_is_active"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Provider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, db_index=True, null=True),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the provider.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("unverified", "Unverified"),
                            ("verifying", "Verifying"),
                            ("failed", "Verification Failed"),
                            ("verified", "Verified"),
                            ("suspended", "Suspended"),
                            ("deprecated", "Deprecated"),
                        ],
                        default="unverified",
                        max_length=32,
                    ),
                ),
                ("is_active", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_featured", models.BooleanField(default=False)),
                ("is_deprecated", models.BooleanField(default=False)),
                ("is_flagged", models.BooleanField(default=False)),
                ("is_suspended", models.BooleanField(default=False)),
                (
                    "base_url",
                    models.URLField(
                        blank=True,
                        help_text="The base URL for the provider's API.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "connectivity_test_path",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="The URL to test connectivity with the provider's API.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="The logo of the provider.",
                        null=True,
                        upload_to="provider_logos/",
                    ),
                ),
                (
                    "website_url",
                    models.URLField(
                        blank=True,
                        help_text="The website_url URL of the provider.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "ownership_requested",
                    models.EmailField(
                        blank=True,
                        help_text="The email address of an alternative contact who has requested to take ownership of the provider.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="The contact email of the provider.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "contact_email_verified",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time when the contact email was verified.",
                        null=True,
                    ),
                ),
                (
                    "support_email",
                    models.EmailField(
                        blank=True,
                        help_text="The support email of the provider.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "support_email_verified",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time when the support email was verified.",
                        null=True,
                    ),
                ),
                (
                    "docs_url",
                    models.URLField(
                        blank=True,
                        help_text="The documentation URL of the provider.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "terms_of_service_url",
                    models.URLField(
                        blank=True,
                        help_text="The terms of service URL of the provider.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "privacy_policy_url",
                    models.URLField(
                        blank=True,
                        help_text="The privacy policy URL of the provider.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "tos_accepted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time when the terms of service were accepted.",
                        null=True,
                    ),
                ),
                (
                    "account",
                    models.ForeignKey(
                        help_text="The account that owns the provider.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="account.account",
                    ),
                ),
                (
                    "api_key",
                    models.ForeignKey(
                        blank=True,
                        help_text="The API key for the provider.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="provider_api_key",
                        to="account.secret",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="The users that owns the provider.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tos_accepted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who accepted the terms of service.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tos_accepted_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Provider",
                "verbose_name_plural": "Providers",
            },
            bases=(models.Model, smarter.common.classes.SmarterHelperMixin),
        ),
        migrations.CreateModel(
            name="ProviderModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, db_index=True, null=True),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_default", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=False)),
                ("is_deprecated", models.BooleanField(default=False)),
                ("is_flagged", models.BooleanField(default=False)),
                ("is_suspended", models.BooleanField(default=False)),
                ("max_tokens", models.PositiveIntegerField(default=4096)),
                ("temperature", models.FloatField(default=0.7)),
                ("top_p", models.FloatField(default=1.0)),
                ("supports_text_input", models.BooleanField(default=True)),
                ("supports_text_generation", models.BooleanField(default=True)),
                ("supports_translation", models.BooleanField(default=True)),
                ("supports_summarization", models.BooleanField(default=True)),
                ("supports_streaming", models.BooleanField(default=False)),
                ("supports_tools", models.BooleanField(default=False)),
                ("supports_image_input", models.BooleanField(default=False)),
                ("supports_audio_input", models.BooleanField(default=False)),
                ("supports_embedding", models.BooleanField(default=False)),
                ("supports_fine_tuning", models.BooleanField(default=False)),
                ("supports_search", models.BooleanField(default=False)),
                ("supports_code_interpreter", models.BooleanField(default=False)),
                ("supports_image_generation", models.BooleanField(default=False)),
                ("supports_audio_generation", models.BooleanField(default=False)),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="provider.provider",
                    ),
                ),
            ],
            options={
                "verbose_name": "Provider Model",
                "verbose_name_plural": "Provider Models",
                "unique_together": {("provider", "name")},
            },
        ),
        migrations.CreateModel(
            name="ProviderModelVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, db_index=True, null=True),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                (
                    "verification_type",
                    models.CharField(
                        choices=[
                            ("streaming", "Streaming"),
                            ("tools", "Tools"),
                            ("text_input", "Text Input"),
                            ("image_input", "Image Input"),
                            ("audio_input", "Audio Input"),
                            ("fine_tuning", "Fine Tuning"),
                            ("search", "Search"),
                            ("code_interpreter", "Code Interpreter"),
                            ("text_to_image", "Text to Image"),
                            ("text_to_audio", "Text to Audio"),
                            ("text_to_text", "Text to Text"),
                            ("translation", "Translation"),
                            ("summarization", "Summarization"),
                        ],
                        default="text_input",
                        max_length=32,
                    ),
                ),
                ("is_successful", models.BooleanField(default=False)),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "provider_model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="provider.providermodel",
                    ),
                ),
            ],
            options={
                "verbose_name": "Provider Model Verification",
                "verbose_name_plural": "Provider Model Verifications",
                "unique_together": {("provider_model", "verification_type")},
            },
        ),
        migrations.CreateModel(
            name="ProviderVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, db_index=True, null=True),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                (
                    "verification_type",
                    models.CharField(
                        choices=[
                            ("api_connectivity", "Api Connectivity"),
                            ("logo", "Logo"),
                            ("contact_email", "Contact Email"),
                            ("support_email", "Support Email"),
                            ("website_url", "Website URL"),
                            ("tos_url", "Terms of Service URL"),
                            ("privacy_policy_url", "Privacy Policy URL"),
                            ("tos_acceptance", "Terms of Service Acceptance"),
                            ("production_api_key", "Production API Key"),
                        ],
                        default="api_connectivity",
                        max_length=32,
                    ),
                ),
                ("is_successful", models.BooleanField(default=False)),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="provider.provider",
                    ),
                ),
            ],
            options={
                "verbose_name": "Provider Verification",
                "verbose_name_plural": "Provider Verifications",
                "unique_together": {("provider", "verification_type")},
            },
        ),
    ]
