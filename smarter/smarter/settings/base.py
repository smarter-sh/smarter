# pylint: disable=unused-wildcard-import, wildcard-import, unused-import, wrong-import-position
"""
Django base settings.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import glob
import logging
import logging.config
import os
import sys
from pathlib import Path

from corsheaders.defaults import default_headers

# Add proprietary settings for the project
from .smarter import *  # noqa: E402, F401, W0401


logger = logging.getLogger(__name__)


# We implemented our own middleware to validate host names
ALLOWED_HOSTS = ["*"]
SMARTER_ALLOWED_HOSTS = []
LOCAL_HOSTS = smarter_settings.local_hosts

# to disable redis/celery in collectstatic
if "collectstatic" in sys.argv:
    CELERY_TASK_ALWAYS_EAGER = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-api-key",
]
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = False

CSRF_COOKIE_SECURE = False
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_SAMESITE = "lax"

SESSION_COOKIE_SAMESITE = "lax"
SESSION_COOKIE_SECURE = False


# Build paths inside the project like this: BASE_DIR / 'subdir'.
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
BASE_DIR = Path(os.path.join(PROJECT_ROOT, "smarter")).resolve()
print("PROJECT_ROOT: ", PROJECT_ROOT)
print("BASE_DIR: ", BASE_DIR)

LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

SECRET_KEY = smarter_settings.secret_key
DEBUG = smarter_settings.debug_mode

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://:smarter@smarter-redis:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"

# Default Celery Configuration
CELERY_BROKER_URL = "redis://:smarter@smarter-redis:6379/1"
CELERY_TASK_TIME_LIMIT = 30 * 60

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # smarter apps
    # -------------------------------
    "smarter.lib.drf",
    "smarter.apps.account",
    "smarter.apps.plugin",
    "smarter.apps.chat",
    "smarter.apps.chatapp",
    "smarter.apps.dashboard",
    "smarter.apps.api",
    "smarter.apps.chatbot",
    # 3rd party apps
    # -------------------------------
    "djstripe",
    "rest_framework",
    "knox",
    "taggit",
    "corsheaders",
    "drf_yasg",
    "django_celery_beat",
    "waffle",
]

MIDDLEWARE = [
    # this replaces corsheaders.middleware.CorsMiddleware"
    "smarter.apps.chatbot.middleware.cors.CorsMiddleware",
    # this replaces django.middleware.security.SecurityMiddleware
    # simple middleware to block requests for common sensitive files
    # like .env, private key files, etc.
    "smarter.lib.django.middleware.BlockSensitiveFilesMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # this replaces django.middleware.csrf.CsrfViewMiddleware
    # to add chatbot-specific CSRF handling
    "smarter.apps.chatbot.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # to manage ALLOWED_HOSTS
    "smarter.apps.chatbot.middleware.security.SecurityMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "waffle.middleware.WaffleMiddleware",
]

ROOT_URLCONF = "smarter.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "smarter.apps.account.context_processors.base",
                "smarter.apps.dashboard.context_processors.branding",
                "smarter.apps.dashboard.context_processors.base",
            ],
        },
    },
    {
        "NAME": "react",
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": False,
        "OPTIONS": {
            "loaders": [
                "smarter.apps.chatapp.template_loaders.ReactAppLoader",
                "django.template.loaders.filesystem.Loader",
            ],
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "smarter.apps.account.context_processors.base",
                "smarter.apps.dashboard.context_processors.base",
            ],
        },
    },
]

WSGI_APPLICATION = "smarter.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "smarter",
        "USER": "smarter",
        "PASSWORD": "smarter",
        "HOST": "smarter-mysql",  # Or an IP Address that your DB is hosted on
        "PORT": "3306",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = PROJECT_ROOT / "staticfiles"

STATICFILES_DIRS = [BASE_DIR / "static"]
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# ReactJS integration with Django. Add all reactapp/dist directories in Django apps
django_apps_dir = BASE_DIR / "apps"
reactapp_dirs = glob.glob(os.path.join(django_apps_dir, "*", "reactapp", "dist"))
STATICFILES_DIRS.extend(reactapp_dirs)

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "smarter.lib.drf.token_authentication.SmarterTokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "smarter.lib.drf.parsers.YAMLParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django.security.DisallowedHost": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}
logging.config.dictConfig(LOGGING)

# https://dj-stripe.dev/dj-stripe/2.7/installation/
STRIPE_LIVE_SECRET_KEY = smarter_settings.stripe_live_secret_key
STRIPE_TEST_SECRET_KEY = smarter_settings.stripe_test_secret_key
STRIPE_LIVE_MODE = False  # Change to True in production
DJSTRIPE_WEBHOOK_SECRET = (
    "whsec_xxx"  # Get it from the section in the Stripe dashboard where you added the webhook endpoint
)
DJSTRIPE_USE_NATIVE_JSONFIELD = True  # We recommend setting to True for new installations
DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"

SMTP_SENDER = smarter_settings.smtp_sender
SMTP_FROM_EMAIL = smarter_settings.smtp_from_email
SMTP_HOST = smarter_settings.smtp_host
SMTP_PASSWORD = smarter_settings.smtp_password
SMTP_PORT = smarter_settings.smtp_port
SMTP_USE_SSL = smarter_settings.smtp_use_ssl
SMTP_USE_TLS = smarter_settings.smtp_use_tls
SMTP_USERNAME = smarter_settings.smtp_username
